import type { AIProvider, AISummaryOptions, CommitSuggestion } from '../../types/ai.js';

export class OpenAIProvider implements AIProvider {
  private apiKey: string | undefined;
  private _model: string;

  constructor(apiKey?: string, model = 'gpt-3.5-turbo') {
    this.apiKey = apiKey;
    this._model = model;
  }

  get model(): string {
    return this._model;
  }

  isConfigured(): boolean {
    return !!this.apiKey;
  }

  async generateCommitMessage(diff: string, options?: AISummaryOptions): Promise<CommitSuggestion> {
    if (!this.isConfigured()) {
      throw new Error('OpenAI API key not configured');
    }

    const model = options?.model || this._model;
    const temperature = options?.temperature ?? 0.7;
    const maxTokens = options?.maxTokens ?? 150;

    const prompt = `Analyze this git diff and generate a conventional commit message.

Rules:
- Subject line should be â‰¤ 50 characters
- Use conventional commit format: type(scope): subject
- Choose appropriate type: feat, fix, docs, style, refactor, test, chore, etc.
- Be concise and descriptive
- Optional body for more details

Git diff:
${diff}

Respond with JSON in this format:
{
  "type": "feat",
  "scope": "auth",
  "subject": "add user authentication",
  "body": "Implement JWT-based authentication system with login/logout functionality",
  "confidence": 0.9,
  "reasoning": "Added new authentication functionality"
}`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model,
          messages: [
            {
              role: 'system',
              content:
                'You are a helpful assistant that generates conventional git commit messages.'
            },
            { role: 'user', content: prompt }
          ],
          temperature,
          max_tokens: maxTokens,
          response_format: { type: 'json_object' }
        })
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
      }

      const data = (await response.json()) as any;
      const content = data.choices?.[0]?.message?.content;

      if (!content) {
        throw new Error('No response from OpenAI API');
      }

      const parsed = JSON.parse(content);

      return {
        type: parsed.type || 'feat',
        scope: parsed.scope,
        subject: parsed.subject || 'update code',
        body: parsed.body,
        confidence: parsed.confidence || 0.7,
        reasoning: parsed.reasoning || 'Generated by OpenAI'
      };
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`OpenAI API error: ${error.message}`);
      }
      throw error;
    }
  }
}
